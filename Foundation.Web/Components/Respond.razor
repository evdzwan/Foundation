@inject RespondScript Script
@inherits Component

<div class="respond @RespondClass" @ref="RespondReference">
    @if (Active)
    {
        @ChildContent
    }
</div>

@code {
    bool Active;
    ElementReference RespondReference;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public Predicate<(int Width, int Height)>? Condition { get; set; }

    ClassList RespondClass => new ClassList().Add("active", Active);

    [JSInvokable]
    public async Task UpdateBounds(int width, int height)
    {
        var wasActive = Active;

        Active = Condition?.Invoke((width, height)) is not false;
        if (Active != wasActive)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Script.Attach(RespondReference, ComponentReference);
        }
    }

    protected override async Task OnDisposingAsync()
        => await Script.Detach(RespondReference);
}
