@using System.Collections.Specialized
@attribute [CascadingTypeParameter(nameof(TModel))]
@inject ChoiceFieldScript Script
@inherits Field<TModel>
@typeparam TModel
@typeparam TItem

@if (Visible)
{
    <div class="field choice">
        <label>@Title</label>
        <div class="field-value">
            <button type="button" disabled="@ReadOnly" @onclick="ShowPopover" @ref="EditorReference">
                @if (EditorValue is { Length: > 0 } value)
                {
                    <span>@value</span>
                }
                else
                {
                    <span>Nothing selected</span>
                }

                <svg fill="currentColor" viewBox="0 0 24 24">
                    <path d="M16.939 7.939 12 12.879l-4.939-4.94-2.122 2.122L12 17.121l7.061-7.06z" />
                </svg>
            </button>
            <div popover @ref="PopoverReference">
                @if (PopoverLoaded)
                {
                    <Select Selection="TableSelection">
                        <Browse PageSize="12">
                            <Table Columns="Columns" Empty="Empty" Items="Items" />
                        </Browse>
                    </Select>
                }
            </div>
        </div>

        @if (ValueExpression is { } valueExpression)
        {
            <ValidationMessage For="valueExpression" />
        }
    </div>
}

@code {
    ISelection<TItem>? TableSelection;
    IDisposable? TableSelectionChangedSubscription;
    ElementReference EditorReference;
    ElementReference PopoverReference;
    bool PopoverLoaded;
    bool PopoverOpen;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public Func<TItem, string?> DisplayItem { get; set; } = CreateDefaultDisplayItem();
    [Parameter] public RenderFragment? Empty { get; set; }
    [Parameter, EditorRequired] public required IAsyncCollection<TItem> Items { get; set; }

    string EditorValue => string.Join(", ", TableSelection?.Select(DisplayItem) ?? []);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Script.Attach(PopoverReference, ComponentReference, CancellationToken);
            if (AutoFocus)
            {
                await EditorReference.FocusAsync();
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Columns ??= ChildContent;

        TableSelectionChangedSubscription?.Dispose();
        TableSelection = CreateSelection(ValueProperty?.PropertyType, Value);
        TableSelectionChangedSubscription = TableSelection?.Subscribe(OnTableSelectionChanged);
    }

    [JSInvokable]
    public Task OnPopoverToggled(bool open)
    {
        PopoverOpen = open;
        return InvokeAsync(StateHasChanged);
    }

    async void OnTableSelectionChanged(ISelection<TItem> selection)
    {
        Value = DetermineValue(selection, Value);
        await InvokeAsync(async () =>
        {
            if (TableSelection is { Multiple: false })
            {
                await HidePopover();
                await EditorReference.FocusAsync();
            }

            StateHasChanged();
        });
    }

    async Task ShowPopover()
    {
        if (!PopoverOpen)
        {
            PopoverLoaded = true;
            await Script.ShowPopover(PopoverReference, EditorReference, CancellationToken);
        }
    }

    async Task HidePopover()
    {
        if (PopoverOpen)
        {
            await Script.HidePopover(PopoverReference, CancellationToken);
        }
    }

    protected override async Task OnDisposingAsync()
    {
        TableSelectionChangedSubscription?.Dispose();
        await Script.Detach(PopoverReference);
    }

    static Func<TItem, string?> CreateDefaultDisplayItem()
    {
        if (typeof(TItem).GetCustomAttribute<DisplayColumnAttribute>() is { DisplayColumn: { Length: > 0 } displayColumn })
        {
            var property = typeof(TItem).GetProperty(displayColumn);
            return item => property?.GetValue(item) as string;
        }

        return item => item?.ToString();
    }

    static ISelection<TItem>? CreateSelection(Type? valueType, object? value) => (valueType, value) switch
    {
        (_, IEnumerable<TItem> items) => Selection.Multiple(items),
        (_, TItem item) => Selection.Single(item),
        ({ } type, _) when type.IsAssignableTo(typeof(IEnumerable<>).MakeGenericType([typeof(TItem)])) => Selection.Multiple<TItem>(),
        ({ } type, _) when type.IsAssignableTo(typeof(TItem)) => Selection.Single<TItem>(),
        _ => null
    };

    static object? DetermineValue(ISelection<TItem> selection, object? value) => (selection, value) switch
    {
        ({ Multiple: true }, ICollection<TItem> collection) => UpdateCollection(collection, selection),
        ({ Multiple: true }, _) => selection.ToArray(),
        ({ Multiple: false }, _) => selection.Cursor,
        _ => value
    };

    static ICollection<TItem> UpdateCollection(ICollection<TItem> collection, ISelection<TItem> selection)
    {
        var originalCollection = collection.ToArray();
        foreach (var item in originalCollection.Except(selection))
        {
            collection.Remove(item);
        }

        foreach (var item in selection.Except(originalCollection))
        {
            collection.Add(item);
        }

        return collection;
    }
}
