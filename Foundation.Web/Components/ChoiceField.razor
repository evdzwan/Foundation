@attribute [CascadingTypeParameter(nameof(TModel))]
@inject ChoiceFieldScript Script
@inherits Field<TModel>
@typeparam TModel
@typeparam TItem

@if (Visible)
{
    <div class="field choice">
        <label>@Title</label>
        <div class="field-value">
            <button type="button" disabled="@ReadOnly" @onclick="ShowPopover" @ref="EditorReference">
                @if (EditorValue is { Length: > 0 } value)
                {
                    <span>@value</span>
                }
                else
                {
                    <span>Nothing selected</span>
                }
            </button>
            <div popover @ref="PopoverReference">
                @if (PopoverLoaded)
                {
                    <Selector Selection="Selection">
                        <Table Columns="Columns" Empty="Empty" Items="Items" />
                    </Selector>
                }
            </div>
        </div>

        @if (ValueExpression is { } valueExpression)
        {
            <ValidationMessage For="valueExpression" />
        }
    </div>
}

@code {
    //https://blog.lhotka.net/2024/03/30/Blazor-8-Render-Mode-Detection

    ISelection<TItem>? Selection;
    ElementReference EditorReference;
    ElementReference PopoverReference;
    bool PopoverLoaded;
    bool PopoverOpen;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public Func<TItem, string?> DisplayItem { get; set; } = CreateDefaultDisplayItem();
    [Parameter] public RenderFragment? Empty { get; set; }
    [Parameter, EditorRequired] public required IAsyncCollection<TItem> Items { get; set; }

    string EditorValue => string.Join(", ", Selection?.Select(DisplayItem) ?? []);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Script.Attach(PopoverReference, ComponentReference, CancellationToken);
            if (AutoFocus)
            {
                await EditorReference.FocusAsync();
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Columns ??= ChildContent;
    }


    [JSInvokable]
    public Task OnPopoverToggled(bool open)
    {
        PopoverOpen = open;
        return InvokeAsync(StateHasChanged);
    }


    async Task ShowPopover()
    {
        if (!PopoverOpen)
        {
            PopoverLoaded = true;
            await Script.ShowPopover(PopoverReference, EditorReference, CancellationToken);
        }
    }

    async Task HidePopover()
    {
        if (PopoverOpen)
        {
            await Script.HidePopover(PopoverReference, CancellationToken);
        }
    }

    //NOTE script zou niet moeten werken tijdens prerendering (RendererInfo?)
    protected override async Task OnDisposingAsync()
        => await Script.Detach(PopoverReference);

    static Func<TItem, string?> CreateDefaultDisplayItem()
    {
        if (typeof(TItem).GetCustomAttribute<DisplayColumnAttribute>() is { DisplayColumn: { Length: > 0 } displayColumn })
        {
            var property = typeof(TItem).GetProperty(displayColumn);
            return item => property?.GetValue(item) as string;
        }

        return item => item?.ToString();
    }
}
