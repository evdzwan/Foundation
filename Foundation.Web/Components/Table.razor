@attribute [CascadingTypeParameter(nameof(TItem))]
@inherits Component
@typeparam TItem

<div class="@TableClass">
    <CascadingValue Value="this" IsFixed>
        @Columns
    </CascadingValue>

    <Defer>
        <div class="table-column" />
        <ForEach Items="RegisteredColumns" Context="column">
            <div class="table-column @column.Class" @key="column" />
        </ForEach>

        <div class="table-header">
            <ForEach Items="RegisteredColumns" Context="column">
                <div class="table-cell @column.CellClass" @key="column">
                    @column.Header
                </div>
            </ForEach>
        </div>

        <div class="table-body">
            @if (ItemsInView is { Length: > 0 } itemsInView)
            {
                <ForEach Items="itemsInView" Context="item">
                    <div class="table-row @GetRowClass(item)" @onclick="() => OnRowPressed(item)" @key="item">
                        <ForEach Items="RegisteredColumns" Context="column">
                            <div class="table-cell @column.CellClass" @key="column">
                                @column.Cell?.Invoke(item)
                            </div>
                        </ForEach>
                    </div>
                </ForEach>
            }
            else if (ItemsInView is { Length: 0 })
            {
                <div class="table-empty">
                    @Empty
                </div>
            }
            else
            {
                <ForEach Items="Enumerable.Range(1, Pager?.PageSize ?? 1)" Context="index">
                    <div class="table-row" @key="index">
                        <ForEach Items="RegisteredColumns" Context="column">
                            <div class="table-cell @column.CellClass" @key="column">
                                ..
                            </div>
                        </ForEach>
                    </div>
                </ForEach>
            }
        </div>

        @if (Pager is { } pager)
        {
            <div class="table-footer">
                <NavLink href="@pager.GetFirstPageUri()">&le;</NavLink>
                <NavLink href="@pager.GetPreviousPageUri()">&lt;</NavLink>
                <span>@((CurrentPage * pager.PageSize) + 1) &ndash; @((CurrentPage + 1) * pager.PageSize)</span>
                <NavLink href="@pager.GetNextPageUri()">&gt;</NavLink>
            </div>
        }
    </Defer>
</div>

@code {
    readonly List<Column<TItem>> RegisteredColumns = [];
    const int DefaultPageSize = 10;

    ClassList TableClass = new("table loading");
    TItem[]? ItemsInView;
    bool HasBeenRendered;

    [CascadingParameter(Name = nameof(CurrentPage))] int CurrentPage { get; set; }
    [CascadingParameter] Pager? Pager { get; set; }

    [CascadingParameter] ISelection<TItem>? Selection { get; set; }
    [CascadingParameter] Selector<TItem>? Selector { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public RenderFragment? Empty { get; set; }
    [Parameter, EditorRequired] public required IAsyncCollection<TItem> Items { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ItemsInView = await GetItemsInView();
            TableClass -= "loading";
            StateHasChanged();
        }

        HasBeenRendered = true;
    }

    protected override void OnParametersSet()
    {
        Columns ??= ChildContent ?? CreateDefaultColumns();
        Empty ??= @<span>No data available</span>;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var currentPage = CurrentPage;
        await base.SetParametersAsync(parameters);
        if (CurrentPage != currentPage && HasBeenRendered)
        {
            ItemsInView = null;
            TableClass += "loading";

            ItemsInView = await GetItemsInView();
            TableClass -= "loading";
            StateHasChanged();
        }
    }

    Task<TItem[]> GetItemsInView() => Pager is { PageSize: > 0 } pager
        ? Items.GetView(new(Skip: CurrentPage * pager.PageSize, Take: pager.PageSize))
        : Items.ToArray();

    ClassList GetRowClass(TItem item)
        => new ClassList().Add("selectable", Selector is not null)
                          .Add("selected", Selection?.IsActive(item) is true);

    void OnRowPressed(TItem item)
        => Selection?.Toggle(item);

    internal void AddColumn(Column<TItem> column)
        => RegisteredColumns.Add(column);

    internal void RemoveColumn(Column<TItem> column)
        => RegisteredColumns.Remove(column);

    static RenderFragment CreateDefaultColumns() => builder =>
    {
        var sequence = 0;
        var usedFill = false;
        var displayColumn = typeof(TItem).GetCustomAttribute<DisplayColumnAttribute>()?.DisplayColumn;
        var properties = typeof(TItem).GetProperties()
                                      .Where(p => p.GetCustomAttribute<DisplayAttribute>() is not null)
                                      .ToArray();

        foreach (var (property, index) in properties.Select((p, i) => (p, i)))
        {
            builder.OpenComponent(sequence++, typeof(Column<>).MakeGenericType(typeof(TItem)));

            var parameter = Expression.Parameter(typeof(TItem), "item");
            var columnExpression = Expression.Lambda<Func<TItem, object?>>(Expression.Convert(Expression.Property(parameter, property.Name), typeof(object)), parameter);
            builder.AddComponentParameter(sequence++, nameof(Column<TItem>.Expression), columnExpression);

            if (property.GetCustomAttribute<KeyAttribute>() is not null)
            {
                builder.AddComponentParameter(sequence++, nameof(Column<TItem>.AlignEnd), true);
            }
            else if (property.Name.Equals(displayColumn, StringComparison.OrdinalIgnoreCase) || (!usedFill && index == properties.Length - 1))
            {
                usedFill = true;
                builder.AddComponentParameter(sequence++, nameof(Column<TItem>.Fill), true);
            }

            builder.CloseComponent();
        }
    };
}
