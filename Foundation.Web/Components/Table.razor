@attribute [CascadingTypeParameter(nameof(TItem))]
@inherits Component
@typeparam TItem

<div class="@TableClass">
    <CascadingValue Value="this" IsFixed>
        @Columns
    </CascadingValue>

    <Defer>
        <div class="table-column hidden" />
        <ForEach Items="RegisteredColumns" Context="column">
            <div class="table-column @column.Class" @key="column" />
        </ForEach>

        <div class="table-header">
            <ForEach Items="RegisteredColumns" Context="column">
                <div class="table-cell @column.CellClass" @key="column">
                    <div class="table-header-title">
                        @if (Browse is not null && column.Equals(RegisteredColumns.First()))
                        {
                            <div class="pagination">
                                <button class="link" type="button" disabled="@(!CanMoveToPreviousPage)" @onclick="Browse.MoveToPreviousPage">
                                    <svg fill="currentColor" viewBox="0 0 24 24">
                                        <path d="m4.431 12.822 13 9A1 1 0 0 0 19 21V3a1 1 0 0 0-1.569-.823l-13 9a1.003 1.003 0 0 0 0 1.645z" />
                                    </svg>
                                </button>
                            </div>
                        }

                        <span>@column.Header</span>
                        @if (Browse is not null && column.Equals(RegisteredColumns.Last()))
                        {
                            <div class="pagination">
                                <button class="link" type="button" disabled="@(!CanMoveToNextPage)" @onclick="Browse.MoveToNextPage">
                                    <svg fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M5.536 21.886a1.004 1.004 0 0 0 1.033-.064l13-9a1 1 0 0 0 0-1.644l-13-9A1 1 0 0 0 5 3v18a1 1 0 0 0 .536.886z" />
                                    </svg>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </ForEach>
        </div>

        <div class="table-body">
            @if (ItemsInView is { Length: > 0 } itemsInView)
            {
                <ForEach Items="itemsInView" Context="item">
                    <div class="table-row @GetRowClass(item)" @onclick="() => OnRowPressed(item)" @key="item">
                        <ForEach Items="RegisteredColumns" Context="column">
                            <div class="table-cell @column.CellClass" @key="column">
                                @column.Cell?.Invoke(item)
                            </div>
                        </ForEach>
                    </div>
                </ForEach>
            }
            else if (ItemsInView is { Length: 0 })
            {
                <div class="table-empty">
                    @Empty
                </div>
            }
            else
            {
                <ForEach Items="Enumerable.Range(1, Browse?.PageSize ?? 1)" Context="index">
                    <div class="table-row" @key="index">
                        <ForEach Items="RegisteredColumns" Context="column">
                            <div class="table-cell @column.CellClass" @key="column">
                                ..
                            </div>
                        </ForEach>
                    </div>
                </ForEach>
            }
        </div>
    </Defer>
</div>

@code {
    readonly List<Column<TItem>> RegisteredColumns = [];
    const int DefaultPageSize = 10;

    ClassList TableClass = new("table loading");
    IDisposable? ItemsSubscription;
    TItem[]? ItemsInView;
    bool HasBeenRendered;

    [CascadingParameter] Browse? Browse { get; set; }
    [CascadingParameter(Name = nameof(CurrentPage))] int CurrentPage { get; set; }

    [CascadingParameter] Select<TItem>? Select { get; set; }
    [CascadingParameter] ISelection<TItem>? Selection { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public RenderFragment? Empty { get; set; }
    [Parameter, EditorRequired] public required IAsyncCollection<TItem> Items { get; set; }

    bool CanMoveToPreviousPage { get; set; }
    bool CanMoveToNextPage { get; set; }

    protected override void OnInitialized()
    {
        if (RendererInfo.IsInteractive)
        {
            ItemsSubscription = Items.Subscribe(OnResetItems);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UpdateItemsInView(await GetItemsInView());
            TableClass -= "loading";

            StateHasChanged();
        }

        HasBeenRendered = true;
    }

    protected override void OnParametersSet()
    {
        Columns ??= ChildContent ?? CreateDefaultColumns();
        Empty ??= @<span>No data available</span>;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var currentPage = CurrentPage;
        await base.SetParametersAsync(parameters);
        if (CurrentPage != currentPage && HasBeenRendered)
        {
            UpdateItemsInView(items: null);
            TableClass += "loading";

            UpdateItemsInView(await GetItemsInView());
            TableClass -= "loading";

            StateHasChanged();
        }
    }

    async void OnResetItems(IAsyncValue<TItem[]> items)
    {
        try
        {
            UpdateItemsInView(items: null);
            TableClass += "loading";
            await InvokeAsync(StateHasChanged);

            UpdateItemsInView(await GetItemsInView());
            TableClass -= "loading";
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex) { await DispatchExceptionAsync(ex); }
    }

    Task<TItem[]> GetItemsInView() => Browse is { PageSize: > 0 } browse
        ? Items.GetView(new(Skip: CurrentPage * browse.PageSize, Take: browse.PageSize))
        : Items.ToArray();

    ClassList GetRowClass(TItem item)
        => new ClassList().Add("selectable", Select is not null)
                          .Add("selected", Selection?.IsActive(item) is true);

    void OnRowPressed(TItem item)
        => Selection?.Toggle(item);

    internal void AddColumn(Column<TItem> column)
        => RegisteredColumns.Add(column);

    internal void RemoveColumn(Column<TItem> column)
        => RegisteredColumns.Remove(column);

    void UpdateItemsInView(TItem[]? items)
    {
        ItemsInView = items;
        UpdatePaginationState();
    }

    void UpdatePaginationState()
    {
        if (ItemsInView is null)
        {
            CanMoveToPreviousPage = false;
            CanMoveToNextPage = false;
        }
        else
        {
            var maxPage = Browse is { } browse && Items.Complete
                ? ((int)Math.Ceiling(Items.Count / (browse.PageSize * 1d)) - 1)
                : (int?)null;

            CanMoveToPreviousPage = CurrentPage > 0;
            CanMoveToNextPage = !maxPage.HasValue || CurrentPage < maxPage.Value;
        }
    }

    protected override void OnDisposing()
        => ItemsSubscription?.Dispose();

    static RenderFragment CreateDefaultColumns() => builder =>
    {
        var sequence = 0;
        var usedFill = false;
        var displayColumn = typeof(TItem).GetCustomAttribute<DisplayColumnAttribute>()?.DisplayColumn;
        var properties = typeof(TItem).GetProperties()
                                      .Where(p => p.GetCustomAttribute<DisplayAttribute>() is not null)
                                      .ToArray();

        foreach (var (property, index) in properties.Select((p, i) => (p, i)))
        {
            builder.OpenComponent(sequence++, typeof(Column<>).MakeGenericType(typeof(TItem)));

            var parameter = Expression.Parameter(typeof(TItem), "item");
            var columnExpression = Expression.Lambda<Func<TItem, object?>>(Expression.Convert(Expression.Property(parameter, property.Name), typeof(object)), parameter);
            builder.AddComponentParameter(sequence++, nameof(Column<TItem>.Expression), columnExpression);

            if (property.GetCustomAttribute<KeyAttribute>() is not null)
            {
                builder.AddComponentParameter(sequence++, nameof(Column<TItem>.AlignEnd), true);
            }
            else if (property.Name.Equals(displayColumn, StringComparison.OrdinalIgnoreCase) || (!usedFill && index == properties.Length - 1))
            {
                usedFill = true;
                builder.AddComponentParameter(sequence++, nameof(Column<TItem>.Fill), true);
            }

            builder.CloseComponent();
        }
    };
}
