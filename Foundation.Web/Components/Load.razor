@inherits Component
@typeparam TModel

@if (Model is { } model)
{
    @Loaded?.Invoke(model)
}
else
{
    <CascadingValue Name="@nameof(Loading)" Value="true" IsFixed>
        @Loading
    </CascadingValue>
}

@code {
    IDisposable? SubjectSubscription;
    TModel? Model;

    [Parameter] public RenderFragment<TModel>? ChildContent { get; set; }
    [Parameter] public RenderFragment<TModel>? Loaded { get; set; }
    [Parameter] public RenderFragment Loading { get; set; } = @<div class="loading-indicator" />;
    [Parameter, EditorRequired] public required IAsyncValue<TModel> Subject { get; set; }

    protected override void OnInitialized()
    {
        if (RendererInfo.IsInteractive)
        {
            SubjectSubscription = Subject.Subscribe(OnResetSubject);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Model = await GetModel();
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
        => Loaded ??= ChildContent;

    async void OnResetSubject(IAsyncValue<TModel> subject)
    {
        try
        {
            Model = default;
            await InvokeAsync(StateHasChanged);

            Model = await GetModel();
            await InvokeAsync(StateHasChanged);
        }
        catch(Exception ex) { await DispatchExceptionAsync(ex); }
    }

    Task<TModel> GetModel()
        => Subject.GetValue(CancellationToken);

    protected override void OnDisposing()
        => SubjectSubscription?.Dispose();
}
