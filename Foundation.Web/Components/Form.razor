@attribute [CascadingTypeParameter(nameof(TModel))]
@inherits Component
@typeparam TModel

<EditForm class="form" EditContext="FormContext">
    <DataAnnotationsValidator />
    <CascadingValue Value="this" IsFixed>
        @ChildContent
    </CascadingValue>
</EditForm>

@code {
    EditContext FormContext = new(model: new());
    TModel? Model;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter, EditorRequired] public required IAsyncValue<TModel> Subject { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Model is null)
        {
            Model = await GetModel();
            UpdateFormContext();
            StateHasChanged();
        }
    }

    void OnFieldChanged(object? sender, FieldChangedEventArgs e) { }

    Task<TModel> GetModel()
        => Subject.GetValue(CancellationToken);

    void UpdateFormContext()
    {
        if (Model?.Equals(FormContext.Model) is not true)
        {
            FormContext.OnFieldChanged -= OnFieldChanged;

            FormContext = new(Model ?? new object());
            if (Model is not null)
            {
                FormContext.OnFieldChanged += OnFieldChanged;
            }
        }
    }
}
