@attribute [CascadingTypeParameter(nameof(TModel))]
@inherits Field<TModel>
@typeparam TModel

@if (Visible)
{
    <div class="field date-time">
        <label>@Title</label>
        <div class="field-value">
            <input type="@GetEditorType()" readonly="@ReadOnly" @bind="EditorValue" @ref="EditorReference" />
        </div>
        @if (ValueExpression is { } valueExpression)
        {
            <ValidationMessage For="valueExpression" />
        }
    </div>
}

@code {
    ElementReference EditorReference;

    [Parameter] public bool Date { get; set; }
    [Parameter] public bool Time { get; set; }

    string? EditorValue
    {
        get => Value switch
        {
            DateTime dateTime => BindConverter.FormatValue(dateTime, GetValueFormat(), CultureInfo.InvariantCulture),
            DateTimeOffset dateTimeOffset => BindConverter.FormatValue(dateTimeOffset, GetValueFormat(), CultureInfo.InvariantCulture),
            DateOnly dateOnly => BindConverter.FormatValue(dateOnly, GetValueFormat(), CultureInfo.InvariantCulture),
            TimeOnly timeOnly => BindConverter.FormatValue(timeOnly, GetValueFormat(), CultureInfo.InvariantCulture),
            _ => null
        };
        set => Value = ValueProperty is { PropertyType: { } propertyType } ? ConvertToValue(value, propertyType) : value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoFocus)
        {
            await EditorReference.FocusAsync();
        }
    }

    string GetEditorType() => (Date, Time) switch
    {
        (true, false) => "date",
        (false, true) => "time",
        _ => "datetime-local"
    };

    string GetValueFormat() => (Date, Time) switch
    {
        (true, false) => "yyyy-MM-dd",
        (false, true) => "HH:mm:ss",
        _ => "yyyy-MM-ddTHH:mm:ss"
    };

    static object? ConvertToValue(string? text, Type valueType)
    {
        var method = typeof(DateTimeField<>).GetMethod(nameof(ConvertToValue),
                                                       genericParameterCount: 1,
                                                       BindingFlags.Static | BindingFlags.NonPublic,
                                                       [typeof(string)])!;

        var genericMethod = method.MakeGenericMethod(valueType);
        return genericMethod.Invoke(obj: null, [text]);
    }

    static TValue? ConvertToValue<TValue>(string? text)
        => BindConverter.TryConvertTo(text, CultureInfo.InvariantCulture, out TValue? typedValue) ? typedValue : default;
}
