@inject MenuController Controller
@inject MenuScript Script
@inherits Component

<div popover class="menu" style="@MenuStyle" @oncontextmenu:preventDefault @ref="MenuReference">
    <h4>@Title</h4>
    <div class="menu-items">
        @if (MenuOpened)
        {
            <CascadingValue Value="Parent ?? this">
                @ChildContent?.Invoke(Context)
            </CascadingValue>
        }
    </div>
</div>

@code {
    ElementReference MenuReference;
    IDisposable? MenuSubscription;
    bool MenuOpened;
    bool MenuOpen;

    object? Context;
    (double Left, double Top)? Offset;

    [CascadingParameter] Menu? Parent { get; set; }
    [Parameter] public RenderFragment<object?>? ChildContent { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public EventCallback<MenuItem> OnItemPressed { get; set; }
    [Parameter] public string? Title { get; set; }

    StyleList MenuStyle => new StyleList().Add("--left", $"{Offset?.Left}px", Offset is not null)
                                          .Add("--top", $"{Offset?.Top}px", Offset is not null);

    public async Task Hide()
    {
        if (MenuOpen)
        {
            await Script.HideMenu(MenuReference, CancellationToken);
        }
    }

    public Task Show(MouseEventArgs e) => Show(context: null, e);
    public async Task Show(object? context, MouseEventArgs e)
    {
        if (!MenuOpen)
        {
            Context = context;
            Offset = (e.ClientX, e.ClientY);
            MenuOpened = true;
            StateHasChanged();

            await Task.Yield();
            await Script.ShowMenu(MenuReference, CancellationToken);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Script.Attach(ComponentReference, MenuReference, CancellationToken);
        }
    }

    protected override void OnInitialized()
    {
        if (RendererInfo.IsInteractive)
        {
            MenuSubscription = Controller.RegisterMenu(this);
        }
    }

    [JSInvokable]
    public Task OnPopoverToggled(bool open)
    {
        MenuOpen = open;
        return InvokeAsync(StateHasChanged);
    }

    protected override async Task OnDisposingAsync()
    {
        Context = null;

        MenuSubscription?.Dispose();
        if (Script.Loaded)
        {
            await Script.Detach(ComponentReference);
        }
    }
}
