@inject MenuController Controller
@inherits Component

<Dialog class="menu" style="@MenuStyle" Toggled="OnDialogToggled" @oncontextmenu:preventDefault @ref="DialogReference">
    <h4>@Title</h4>
    <div class="menu-items">
        @if (MenuRequested)
        {
            <CascadingValue Value="Parent ?? this">
                @ChildContent?.Invoke(Context)
            </CascadingValue>
        }
    </div>
</Dialog>

@code {
    Dialog? DialogReference;
    IDisposable? MenuSubscription;
    bool MenuRequested;
    bool DialogVisible;

    object? Context;
    (double Left, double Top)? Offset;

    [CascadingParameter] Menu? Parent { get; set; }
    [Parameter] public RenderFragment<object?>? ChildContent { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public EventCallback<MenuItem> OnItemPressed { get; set; }
    [Parameter] public string? Title { get; set; }

    StyleList MenuStyle => new StyleList().Add("inset", "unset")
                                          .Add("left", $"{Offset?.Left}px", Offset is not null)
                                          .Add("margin", "0")
                                          .Add("position", "fixed")
                                          .Add("top", $"{Offset?.Top}px", Offset is not null);

    public Task Hide()
        => DialogVisible && DialogReference is { } dialog ? dialog.Hide() : Task.CompletedTask;

    public Task Show(MouseEventArgs e) => Show(context: null, e);
    public async Task Show(object? context, MouseEventArgs e)
    {
        if (!DialogVisible)
        {
            Context = context;
            Offset = (e.ClientX, e.ClientY);
            MenuRequested = true;
            StateHasChanged();

            await Task.Yield();
            if (DialogReference is { } dialog)
            {
                await dialog.Show();
            }
        }
    }

    protected override void OnInitialized()
    {
        if (RendererInfo.IsInteractive)
        {
            MenuSubscription = Controller.RegisterMenu(this);
        }
    }

    void OnDialogToggled(bool visible)
        => DialogVisible = visible;

    protected override void OnDisposing()
    {
        Context = null;
        MenuSubscription?.Dispose();
    }
}
