@inject MenuScript Script
@inherits Component

<div popover class="menu" style="@MenuStyle" @oncontextmenu:preventDefault @ref="MenuReference">
    <h4>@Header</h4>

    <div class="menu-items">
        <CascadingValue Value="Parent ?? this" IsFixed>
            @Items
        </CascadingValue>
    </div>
</div>

@code {
    readonly StyleList MenuStyle = new();
    ElementReference MenuReference;
    bool MenuOpen;

    [CascadingParameter] Menu? Parent { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? Items { get; set; }
    [Parameter] public (double Left, double Top)? Offset { get; set; }
    [Parameter] public EventCallback<MenuItem> OnItemPressed { get; set; }
    [Parameter] public string? Title { get; set; }

    public async Task Hide()
        => await Script.HidePopover(MenuReference, CancellationToken);

    public Task Show(MouseEventArgs e)
    {
        Offset = (e.ClientX, e.ClientY);
        return Show();
    }

    async Task Show()
    {
        if (!MenuOpen && Offset is { } offset)
        {
            SetPosition($"{offset.Left}px", $"{offset.Top}px");
            StateHasChanged();

            await Task.Yield();
            await Script.ShowPopover(MenuReference, trigger: null, CancellationToken);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Script.Attach(MenuReference, ComponentReference, CancellationToken);
            if (Parent is null)
            {
                await Show();
            }
        }
    }

    protected override void OnParametersSet()
    {
        Header ??= @<span>@Title</span>;
        Items ??= ChildContent;
    }

    [JSInvokable]
    public Task OnPopoverToggled(bool open)
    {
        MenuOpen = open;
        return InvokeAsync(StateHasChanged);
    }

    void SetPosition(string left, string top)
    {
        MenuStyle.Remove("--left");
        MenuStyle.Add("--left", left);
        MenuStyle.Remove("--top");
        MenuStyle.Add("--top", top);
    }

    protected override async Task OnDisposingAsync()
        => await Script.Detach(MenuReference);
}
