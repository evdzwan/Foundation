@attribute [CascadingTypeParameter(nameof(TModel))]
@inherits Field<TModel>
@typeparam TModel

@if (Visible)
{
    <div class="field text">
        <label>@Title</label>
        <div class="field-value">
            @if (MultiLine)
            {
                <textarea readonly="@ReadOnly" @bind="EditorValue" @ref="EditorReference" />
            }
            else
            {
                <input type="text" readonly="@ReadOnly" @bind="EditorValue" @ref="EditorReference" />
            }
        </div>

        @if (ValueExpression is { } valueExpression)
        {
            <ValidationMessage For="valueExpression" />
        }
    </div>
}

@code {
    ElementReference EditorReference;

    [Parameter] public bool MultiLine { get; set; }

    string? EditorValue
    {
        get => Convert.ChangeType(Value, typeof(string)) as string;
        set => Value = ValueProperty is { PropertyType: { } propertyType } ? Convert.ChangeType(value, propertyType) : value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoFocus)
        {
            await EditorReference.FocusAsync();
        }
    }
}
