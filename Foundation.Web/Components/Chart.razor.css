@property --value {
    inherits: false;
    initial-value: 0;
    syntax: "<number>";
}

@property --value-offset {
    inherits: false;
    initial-value: 0;
    syntax: "<number>";
}

@property --value-prev {
    inherits: false;
    initial-value: 0;
    syntax: "<number>";
}

.chart {
    --chart-bg: inherit;
    --chart-fg: inherit;
    --count: 1;
    --gap: 0;
    --padding: 0;
    --value-max: 1;
    --value-sum: 1;
    background-color: var(--chart-bg);
    color: var(--chart-fg);
    display: block;
    overflow: hidden;
    position: relative;
    user-select: none;
}

    .chart > .entity {
        --entity-bg: hsl(calc(var(--index) / var(--count) * 360deg), 70%, 60%);
        --entity-fg: hsl(calc(var(--index) / var(--count) * 360deg + 180deg), 70%, 60%);
        --index: 0;
        --value: 0;
        --value-offset: 0;
        --value-prev: 0;
        background-color: var(--entity-bg);
        color: var(--entity-fg);
        inset: 0;
        position: absolute;
    }

    .chart.area {
        --horizontal-space: calc(100% - var(--padding) * 2 - var(--gap) * (var(--count) - 1));
    }

        .chart.area > .entity {
            --gap-offset: calc(var(--gap) * var(--index));
            --bar-lt: calc(var(--padding) + var(--gap-offset) + var(--index) / var(--count) * var(--horizontal-space)) calc(100% - (var(--padding) + var(--value-prev) / var(--value-max) * (100% - var(--padding) * 2)));
            --bar-rt: calc(var(--padding) + var(--gap-offset) + (var(--index) + 1) / var(--count) * var(--horizontal-space)) calc(100% - (var(--padding) + var(--value) / var(--value-max) * (100% - var(--padding) * 2)));
            --bar-rb: calc(var(--padding) + var(--gap-offset) + (var(--index) + 1) / var(--count) * var(--horizontal-space)) calc(100% - var(--padding));
            --bar-lb: calc(var(--padding) + var(--gap-offset) + var(--index) / var(--count) * var(--horizontal-space)) calc(100% - var(--padding));
            clip-path: polygon(var(--bar-lt), var(--bar-rt), var(--bar-rb), var(--bar-lb));
        }

    .chart.bar {
        --horizontal-space: calc(100% - var(--padding) * 2 - var(--gap) * (var(--count) - 1));
    }

        .chart.bar > .entity {
            --gap-offset: calc(var(--gap) * var(--index));
            --bar-lt: calc(var(--padding) + var(--gap-offset) + var(--index) / var(--count) * var(--horizontal-space)) calc(100% - (var(--padding) + var(--value) / var(--value-max) * (100% - var(--padding) * 2)));
            --bar-rt: calc(var(--padding) + var(--gap-offset) + (var(--index) + 1) / var(--count) * var(--horizontal-space)) calc(100% - (var(--padding) + var(--value) / var(--value-max) * (100% - var(--padding) * 2)));
            --bar-rb: calc(var(--padding) + var(--gap-offset) + (var(--index) + 1) / var(--count) * var(--horizontal-space)) calc(100% - var(--padding));
            --bar-lb: calc(var(--padding) + var(--gap-offset) + var(--index) / var(--count) * var(--horizontal-space)) calc(100% - var(--padding));
            clip-path: polygon(var(--bar-lt), var(--bar-rt), var(--bar-rb), var(--bar-lb));
        }

    .chart.donut {
        --gap: 0%;
        --ring-size: 10%;
        --space: calc(100% - var(--padding) * 2);
    }

        .chart.donut::after {
            --inset-space: calc(var(--space) - var(--ring-size) * 2);
            aspect-ratio: 1;
            background-color: var(--chart-bg);
            border-radius: 50%;
            content: '';
            height: min(var(--inset-space), var(--inset-space));
            left: 50%;
            position: absolute;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        .chart.donut > .entity {
            --angle-avg: calc((var(--angle-start) + var(--angle-end)) / 2);
            --angle-start: calc((var(--value-offset) / var(--value-sum)) * 360deg);
            --angle-end: calc(((var(--value-offset) + var(--value)) / var(--value-sum)) * 360deg);
            --slice-center: 50% 50%;
            --slice-start: calc(50% + sin(var(--angle-start)) * 100%) calc(50% - cos(var(--angle-start)) * 100%);
            --slice-end: calc(50% + sin(var(--angle-end)) * 100%) calc(50% - cos(var(--angle-end)) * 100%);
            aspect-ratio: 1;
            border-radius: 50%;
            clip-path: polygon(var(--slice-center), var(--slice-start), var(--slice-end));
            height: min(var(--space), var(--space));
            left: 50%;
            top: 50%;
            transform-origin: calc(50% + sin(var(--angle-avg)) * 50%) calc(50% - cos(var(--angle-avg)) * 50%);
            transform: translate(-50%, -50%) scale(calc(100% - var(--gap)));
        }

    .chart.dot {
        --dot-size: 0;
        --horizontal-space: calc(100% - var(--padding) * 2);
    }

        .chart.dot > .entity {
            --dot-center: calc(var(--padding) + var(--index) / (var(--count) - 1) * var(--horizontal-space)) calc(100% - (var(--padding) + var(--value) / var(--value-max) * (100% - var(--padding) * 2)));
            clip-path: circle(calc(var(--dot-size) / 2) at var(--dot-center));
        }

    .chart.pie {
        --gap: 0%;
        --space: calc(100% - var(--padding) * 2);
    }

        .chart.pie > .entity {
            --angle-avg: calc((var(--angle-start) + var(--angle-end)) / 2);
            --angle-start: calc((var(--value-offset) / var(--value-sum)) * 360deg);
            --angle-end: calc(((var(--value-offset) + var(--value)) / var(--value-sum)) * 360deg);
            --slice-root: 50% 50%;
            --slice-start: calc(50% + sin(var(--angle-start)) * 100%) calc(50% - cos(var(--angle-start)) * 100%);
            --slice-end: calc(50% + sin(var(--angle-end)) * 100%) calc(50% - cos(var(--angle-end)) * 100%);
            aspect-ratio: 1;
            border-radius: 50%;
            clip-path: polygon(var(--slice-root), var(--slice-start), var(--slice-end));
            height: min(var(--space), var(--space));
            left: 50%;
            top: 50%;
            transform-origin: calc(50% + sin(var(--angle-avg)) * 50%) calc(50% - cos(var(--angle-avg)) * 50%);
            transform: translate(-50%, -50%) scale(calc(100% - var(--gap)));
        }

    .chart.waterfall {
        --vertical-space: calc(100% - var(--padding) * 2 - var(--gap) * (var(--count) - 1));
    }

        .chart.waterfall > .entity {
            --gap-offset: calc(var(--gap) * var(--index));
            --bar-lt: calc(var(--padding) + var(--value-offset) / var(--value-sum) * (100% - var(--padding) * 2)) calc(var(--padding) + var(--gap-offset) + var(--index) / var(--count) * var(--vertical-space));
            --bar-rt: calc(var(--padding) + (var(--value) + var(--value-offset)) / var(--value-sum) * (100% - var(--padding) * 2)) calc(var(--padding) + var(--gap-offset) + var(--index) / var(--count) * var(--vertical-space));
            --bar-rb: calc(var(--padding) + (var(--value) + var(--value-offset)) / var(--value-sum) * (100% - var(--padding) * 2)) calc(var(--padding) + var(--gap-offset) + (var(--index) + 1) / var(--count) * var(--vertical-space));
            --bar-lb: calc(var(--padding) + var(--value-offset) / var(--value-sum) * (100% - var(--padding) * 2)) calc(var(--padding) + var(--gap-offset) + (var(--index) + 1) / var(--count) * var(--vertical-space));
            clip-path: polygon(var(--bar-lt), var(--bar-rt), var(--bar-rb), var(--bar-lb));
        }
