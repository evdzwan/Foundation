@property --offset {
    inherits: false;
    initial-value: 0;
    syntax: "<number>";
}

@property --value {
    inherits: false;
    initial-value: 0;
    syntax: "<number>";
}

.chart {
    --chart-bg: inherit;
    --chart-fg: inherit;
    --gap: 0;
    --padding: 0;
    --items-count: 1;
    --ring-size: 1rem;
    --value-max: 1;
    --value-sum: 1;
    background-color: var(--chart-bg);
    color: var(--chart-fg);
    display: block;
    overflow: hidden;
    position: relative;
    user-select: none;
}

    .chart > .entity {
        --entity-bg: hsl(calc(var(--index) / var(--items-count) * 360deg), 70%, 60%);
        --index: 0;
        --offset: 0;
        --value: 0;
        background-color: var(--entity-bg);
        overflow: hidden;
        position: absolute;
    }

    .chart.bar > .entity {
        bottom: var(--padding);
        height: calc(var(--value) / var(--value-max) * (100% - var(--padding) * 2));
        left: calc(var(--padding) + var(--index) / var(--items-count) * (100% - var(--padding) * 2 + var(--gap)));
        width: calc((100% - var(--padding) * 2 - var(--gap) * var(--items-count)) / var(--items-count));
    }

    .chart.donut::after {
        aspect-ratio: 1;
        background-color: var(--chart-bg);
        border-radius: 50%;
        content: '';
        height: min(calc(100% - var(--padding) * 2 - var(--ring-size)), calc(100% - var(--padding) * 2 - var(--ring-size)));
        left: 50%;
        top: 50%;
        position: absolute;
        transform: translate(-50%, -50%);
    }

    .chart.donut > .entity {
        --angle-start: calc((var(--offset) / var(--value-sum)) * 360deg);
        --angle-end: calc(((var(--offset) + var(--value)) / var(--value-sum)) * 360deg);
        aspect-ratio: 1;
        border-radius: 50% !important;
        clip-path: polygon(50% 50%, calc(50% + sin(var(--angle-start)) * 100%) calc(50% - cos(var(--angle-start)) * 100%), calc(50% + sin(var(--angle-end)) * 100%) calc(50% - cos(var(--angle-end)) * 100%));
        height: min(calc(100% - var(--padding) * 2), calc(100% - var(--padding) * 2));
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }

    .chart.pie > .entity {
        --angle-start: calc((var(--offset) / var(--value-sum)) * 360deg);
        --angle-end: calc(((var(--offset) + var(--value)) / var(--value-sum)) * 360deg);
        aspect-ratio: 1;
        border-radius: 50% !important;
        clip-path: polygon(50% 50%, calc(50% + sin(var(--angle-start)) * 100%) calc(50% - cos(var(--angle-start)) * 100%), calc(50% + sin(var(--angle-end)) * 100%) calc(50% - cos(var(--angle-end)) * 100%));
        height: min(calc(100% - var(--padding) * 2), calc(100% - var(--padding) * 2));
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }

    .chart.waterfall > .entity {
        height: calc((100% - var(--padding) * 2 - var(--gap) * var(--items-count)) / var(--items-count));
        left: calc(var(--padding) + var(--offset) / var(--value-sum) * (100% - var(--padding) * 2));
        top: calc(var(--padding) + var(--index) / var(--items-count) * (100% - var(--padding) * 2 + var(--gap)));
        width: calc(var(--value) / var(--value-sum) * (100% - var(--padding) * 2));
    }
