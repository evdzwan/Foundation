@typeparam TItem
@typeparam TValue where TValue : INumber<TValue>
@inherits Component

<div class="chart @ChartClass" style="@ChartStyle">
    @if (Entities is { } entities)
    {
        <ForEach Items="entities" Context="entity">
            <div class="entity" style="@entity.Style" @key="entity.Item" />
        </ForEach>
    }
    else
    {
        <div class="loading-indicator" />
    }
</div>

@code {
    ChartEntity[]? Entities;
    IDisposable? ItemsSubscription;

    [Parameter, EditorRequired] public required IAsyncValue<TItem[]> Items { get; set; }
    [Parameter, EditorRequired] public required Func<TItem, TValue> Value { get; set; }
    [Parameter] public ChartType Type { get; set; } = ChartType.Bar;
    [Parameter] public TValue Maximum { get; set; } = TValue.Zero;
    [Parameter] public bool Live { get; set; }

    ClassList ChartClass => new ClassList().Add(Type.ToString().ToLowerInvariant());
    StyleList ChartStyle => new StyleList().Add("--count", () => Entities!.Length, Entities is not null)
                                           .Add("--value-max", () => Maximum > TValue.Zero ? Maximum : Entities!.Select(e => e.Value).Max(), Entities is not null)
                                           .Add("--value-sum", () => Entities!.Select(e => e.Value).Sum(), Entities is not null);

    protected override void OnInitialized()
    {
        if (RendererInfo.IsInteractive)
        {
            ItemsSubscription = Items.Subscribe(OnResetItems);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var items = await Items.GetValue(CancellationToken);
            Entities = CreateEntities(items);
            StateHasChanged();
        }
    }

    async void OnResetItems(IAsyncValue<TItem[]> items)
    {
        try
        {
            if (!Live)
            {
                Entities = null;
                await InvokeAsync(StateHasChanged);
            }

            Entities = CreateEntities(await Items.GetValue(CancellationToken));
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex) { await DispatchExceptionAsync(ex); }
    }

    protected override void OnDisposing()
        => ItemsSubscription?.Dispose();

    ChartEntity[] CreateEntities(TItem[] items)
    {
        var offset = TValue.Zero;
        var prevValue = TValue.Zero;
        var entities = new List<ChartEntity>();

        var index = 0;
        foreach (var item in items)
        {
            var value = Value(item);
            entities.Add(new(item, index++, value, offset, prevValue));
            prevValue = value;
            offset += value;
        }

        return [.. entities];
    }

    sealed record ChartEntity(TItem Item, int Index, TValue Value, TValue ValueOffset, TValue ValuePrev)
    {
        public StyleList Style { get; } = new StyleList().Add("--index", Index)
                                                         .Add("--value", Value)
                                                         .Add("--value-offset", ValueOffset)
                                                         .Add("--value-prev", ValuePrev);
    }
}
