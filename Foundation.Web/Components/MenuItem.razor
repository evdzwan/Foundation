@inherits Component

<div class="menu-item @MenuItemClass">
    <button type="button" disabled="@Disabled" @onclick="OnButtonPressed">@Title</button>

    @if (ChildContent is { } childContent)
    {
        <button class="link toggle" type="button" disabled="@Disabled" @onclick="ShowChildMenu">
            <svg fill="currentColor" viewBox="0 0 24 24">
                <path d="M10.061 19.061 17.121 12l-7.06-7.061-2.122 2.122L12.879 12l-4.94 4.939z" />
            </svg>
        </button>

        <CascadingValue Value="this" IsFixed>
            <Menu Title="@Title" @ref="ChildMenu">
                @childContent
            </Menu>
        </CascadingValue>
    }
</div>

@code {
    Menu? ChildMenu;

    [CascadingParameter(Name = nameof(Loading))] bool Loading { get; set; }
    [CascadingParameter] Menu? Parent { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public object? Context { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public EventCallback<MenuItem> OnPressed { get; set; }
    [Parameter] public string? Title { get; set; }

    ClassList MenuItemClass => new ClassList().Add("loading", Loading);

    async Task OnButtonPressed()
    {
        var pressed = OnPressed.HasDelegate ? OnPressed : Parent?.OnItemPressed;
        if (pressed?.HasDelegate is true)
        {
            if (Parent is { } parent)
            {
                await parent.Hide();
            }

            await pressed.Value.InvokeAsync(this);
        }
    }

    Task ShowChildMenu(MouseEventArgs e)
        => ChildMenu?.Show(e) ?? Task.CompletedTask;
}
