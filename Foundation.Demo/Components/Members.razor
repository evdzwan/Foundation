@using System.Text.RegularExpressions
@using System.Globalization
@using System.Collections
@using System.Resources

@attribute [StreamRendering]
@inherits Component

<h5>Members of @CreateMarkupString(GetTypeDeclaration(SubjectType))</h5>
<div class="members">
    @if (SubjectResources is { Length: > 0 } resources)
    {
        <table>
            <ForEach Items="resources" Context="resource">
                <tr @key="resource">
                    <td><code>@resource.Name</code></td>
                    <td>@CreateMarkupString(resource.Value)</td>
                </tr>
            </ForEach>
        </table>
    }
    else
    {
        <div class="empty">Type does not contain any members</div>
    }
</div>

@code {
    static IReadOnlyDictionary<string, MemberResource[]>? MemberResources;
    MemberResource[]? SubjectResources;

    [Parameter, EditorRequired] public required Type SubjectType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var resources = await GetMemberResources();
        SubjectResources = resources.GetValueOrDefault(GetTypeName(SubjectType)) ?? [];
    }

    static string CreateDataString(string content) => content.Replace("<", "&lt;").Replace(">", "&gt;");
    static MarkupString? CreateMarkupString(string? content) => content is { Length: > 0 } ? new MarkupString(content) : null;

    static async Task<IReadOnlyDictionary<string, MemberResource[]>> GetMemberResources()
    {
        if (MemberResources is null && await GetMembersResourceSetOrDefault() is { } resourceSet)
        {
            MemberResources = resourceSet.OfType<DictionaryEntry>()
                                         .Select(MemberResource.Create)
                                         .OrderBy(r => r.Subject)
                                         .ThenBy(r => r.Type == MemberResourceType.Method)
                                         .ThenBy(r => r.Name)
                                         .GroupBy(r => r.Subject)
                                         .ToDictionary(g => g.Key, g => g.ToArray());
        }

        return MemberResources ??= new Dictionary<string, MemberResource[]>();
    }

    static Task<ResourceSet?> GetMembersResourceSetOrDefault()
        => Task.Run(() => Resources.Members.ResourceManager.GetResourceSet(CultureInfo.CurrentCulture, createIfNotExists: true, tryParents: true));

    static string GetTypeDeclaration(Type type)
    {
        var typeName = GetTypeNameWithGenerics(type);

        var isAbstract = type is { IsAbstract: true, IsInterface: false, IsSealed: false };
        var baseTypeName = type.BaseType is { } baseType && baseType.Assembly == type.Assembly && baseType != typeof(Component) ? GetTypeNameWithGenerics(baseType) : null;
        var interfaceNames = type.GetInterfaces().Where(i => i.Assembly == type.Assembly).Select(GetTypeNameWithGenerics);
        var baseNames = interfaceNames.Prepend(baseTypeName).OfType<string>().ToArray();

        var abstractText = isAbstract ? " <sup>abstract</sup>" : null;
        var baseText = baseNames.Length > 0 ? $" : {string.Join(", ", baseNames)}" : null;
        return $"<code>{typeName}{baseText}</code>{abstractText}";
    }

    static string GetTypeName(Type type) => Regex.Replace(type.Name, "`\\d+", "");
    static string GetTypeNameWithGenerics(Type type) => type switch
    {
        { IsGenericType: true } => CreateDataString($"{GetTypeName(type)}<{string.Join(", ", type.GetGenericArguments().Select(arg => arg.Name))}>"),
        _ => GetTypeName(type)
    };

    sealed record MemberResource(string Name, string Subject, MemberResourceType Type, string? Value)
    {
        public static MemberResource Create(DictionaryEntry entry)
        {
            var fullKey = entry.Key.ToString()!.Split('.');
            var subject = fullKey[0];
            var name = string.Join('.', fullKey.Skip(1));
            var type = name.EndsWith(')') ? MemberResourceType.Method : MemberResourceType.Property;
            var value = entry.Value?.ToString();

            return new(name, subject, type, value);
        }
    }

    enum MemberResourceType
    {
        Method,
        Property
    }
}
