@rendermode InteractiveServer
@page "/components/form"

<PageTitle>Form</PageTitle>
<article>
    <h1>Form</h1>
    <p>
        Blabla verhaaltje
    </p>

    <Form Subject="Book">
        <TextField Expression="book => book.Id" ReadOnly />
        <TextField Expression="book => book.Title" />
        <TextField Expression="book => book.Summary" MultiLine />
        <DateTimeField Expression="book => book.PublicationDate" Date />
    </Form>

    <section>
        <h3>Data Binding</h3>
        <p>
            Blabla verhaaltje
        </p>
        <Example Resource="Components\Form\DataBinding.razor" />
        <p>
            Blabla verhaaltje
        </p>
    </section>

    <section>
        <h3>Fields</h3>
        <p>
            Blabla verhaaltje
        </p>
        <Example Resource="Components\Form\ChoiceField.razor" />
        <p>
            Blabla verhaaltje
        </p>
        <Example Resource="Components\Form\DateTimeField.razor" />
        <p>
            Blabla verhaaltje
        </p>
        <Example Resource="Components\Form\SwitchField.razor" />
        <p>
            Blabla verhaaltje
        </p>
        <Example Resource="Components\Form\TextField.razor" />
        <p>
            Blabla verhaaltje
        </p>
        <Example Resource="Components\Form\Field.razor" />
    </section>
</article>

@code {
    readonly IAsyncValue<Book> Book = AsyncValue.Create(async () =>
    {
        await Task.Delay(2_000);
        return BookRepository.CreateRandom();
    });
}
