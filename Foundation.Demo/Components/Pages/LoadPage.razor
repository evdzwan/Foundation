@rendermode InteractiveServer
@page "/components/load"

<PageTitle>Load</PageTitle>
<article class="demo-list">
    <Demo Title="Styling">
        <DemoSegment>
            With <code>&lt;Load /&gt;</code> you can lazily load data, making use of <a href="/misc/asyncvalue"><code>IAsyncValue&lt;&gt;</code></a>.
            The component has two states, <code>Loading</code> and <code>Loaded</code> (or <code>ChildContent</code>).
            By default, <code>Loading</code> renders as <code>&lt;div class=&quot;loading-indicator&quot; /&gt;</code>, but you can override this behavior.
            In this example we didn't do that, but we did apply some styling to the <code>loading-indicator</code> class.
        </DemoSegment>
        <DemoSegment>
            <Load Subject="Books" Context="books">
                <ul>
                    <ForEach Items="books" Context="book">
                        <li @key="book">@book.Title</li>
                    </ForEach>
                </ul>
            </Load>
        </DemoSegment>
        <DemoSegment Resource="Load/Styling.razor" />
        <DemoSegment>
            Note that these examples also use the <a href="/components/foreach"><code>&lt;ForEach /&gt;</code></a> component, which you might find interesting.
        </DemoSegment>
    </Demo>
    <Demo Title="Loading Template">
        <DemoSegment>
            You can also specify the <code>Loading</code> template yourself, as shown in the following example.
        </DemoSegment>
        <DemoSegment>
            <ul>
                <Load Subject="Books" Context="books">
                    <Loaded>
                        <ForEach Items="books" Context="book">
                            <li @key="book">@book.Title</li>
                        </ForEach>
                    </Loaded>
                    <Loading>
                        <li>Loading...</li>
                    </Loading>
                </Load>
            </ul>
        </DemoSegment>
        <DemoSegment Resource="Load/Template.razor" />
    </Demo>

    <Members SubjectType="typeof(Load<>)" />
</article>

@code {
    readonly IAsyncValue<Book[]> Books = AsyncValue.Create(async () =>
    {
        await Task.Delay(2_000);

        var books = BookRepository.CreateRange(1, 5);
        Console.WriteLine($"Retrieved Book[{books.Length}]");
        return books;
    });
}
