@rendermode InteractiveServer
@page "/components/chart"
@implements IDisposable

<PageTitle>Chart</PageTitle>
<article class="demo-list">
    <Demo Title="Chart">
        <DemoSegment>
            Show charts of various types with the <code>&lt;Chart /&gt;</code> component.
            The default type is <code>ChartType.Bar</code>.
            All available types are showcased below.
            Use these controls to manipulate the datasource and see how the charts respond.
        </DemoSegment>
        <DemoSegment>
            <div class="controls">
                <div>
                    <button disabled="@LiveUpdates" @onclick="RandomizeRatings">Randomize values</button>
                    <button @onclick="ToggleLiveUpdates">@(LiveUpdates ? "Disable" : "Enable") live updates</button>
                </div>
                <div>
                    <button @onclick="AddItem">Add item</button>
                    <button @onclick="RemoveItem">Remove item</button>
                </div>
            </div>
        </DemoSegment>
        <DemoSegment>
            <div class="charts">
                <div>
                    @RenderChartHeader("Area")
                    <Chart Items="Ratings" Value="item => item.Rating" Live="LiveUpdates" Maximum="100" Type="ChartType.Area" />
                </div>
                <div>
                    @RenderChartHeader("Bar")
                    <Chart Items="Ratings" Value="item => item.Rating" Live="LiveUpdates" Maximum="100" />
                </div>
                <div>
                    @RenderChartHeader("Donut")
                    <Chart Items="Ratings" Value="item => item.Rating" Live="LiveUpdates" Type="ChartType.Donut" />
                </div>
                <div>
                    @RenderChartHeader("Dot")
                    <Chart Items="Ratings" Value="item => item.Rating" Live="LiveUpdates" Maximum="100" Type="ChartType.Dot" />
                </div>
                <div>
                    @RenderChartHeader("Pie")
                    <Chart Items="Ratings" Value="item => item.Rating" Live="LiveUpdates" Type="ChartType.Pie" />
                </div>
                <div>
                    @RenderChartHeader("Waterfall")
                    <Chart Items="Ratings" Value="item => item.Rating" Live="LiveUpdates" Type="ChartType.Waterfall" />
                </div>
            </div>
        </DemoSegment>
        <DemoSegment Resource="Chart/Charts.razor" />
        <DemoSegment Resource="Chart/Style.css" />
    </Demo>

    <Members SubjectType="typeof(Chart<,>)" />
</article>

@code {
    static List<BookRating> AllRatings = [.. BookRatingRepository.CreateRange(1, 10)];
    readonly PeriodicTimer UpdateTimer = new(TimeSpan.FromSeconds(1));
    bool LiveUpdates = false;

    readonly IAsyncValue<BookRating[]> Ratings = AsyncValue.Create(async () =>
    {
        await Task.Delay(500);
        AllRatings.ForEach(r => r.Rating = Random.Shared.Next(100));
        return AllRatings.ToArray();
    });

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ToggleLiveUpdates();
            StateHasChanged();
        }
    }

    void AddItem()
    {
        AllRatings.Add(BookRatingRepository.Create(id: AllRatings.Count + 1));
        if (!LiveUpdates)
        {
            Ratings.Reset();
        }
    }

    void RemoveItem()
    {
        if (AllRatings.Count > 0)
        {
            AllRatings.RemoveAt(AllRatings.Count - 1);
            if (!LiveUpdates)
            {
                Ratings.Reset();
            }
        }
    }

    void RandomizeRatings()
        => Ratings.Reset();

    async Task ToggleLiveUpdates()
    {
        LiveUpdates = !LiveUpdates;
        StateHasChanged();

        if (LiveUpdates)
        {
            while (LiveUpdates && await UpdateTimer.WaitForNextTickAsync())
            {
                RandomizeRatings();
            }
        }
    }

    RenderFragment RenderChartHeader(string title) => __builder =>
    {
        <h5>
            @($"{title} ")
            @if (LiveUpdates)
            {
                <sup>live</sup>
            }
        </h5>
    };

    void IDisposable.Dispose()
        => UpdateTimer.Dispose();
}
